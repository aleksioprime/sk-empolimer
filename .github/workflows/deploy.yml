name: Deploy to Server

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Run backend tests
      run: |
        echo "Тесты бэкенда пока отключены. Возвращаем успешный статус."

    - name: Run frontend tests
      run: |
        echo "Тесты фронтенда пока отключены. Возвращаем успешный статус."

  deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Deploy on server
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'

          # Создаём папку, если её нет
          mkdir -p ~/empolimer
          cd ~/empolimer

          # Загружаем переменные окружения на сервер
          echo "${{ secrets.ENV_VARS }}" > ~/empolimer/.env
          echo "Файл .env загружен на сервер"

          curl -o ~/empolimer/docker-compose.prod.yaml https://raw.githubusercontent.com/aleksioprime/sk-empolimer/main/web/docker-compose.prod.yaml

          # Если nginx.conf НЕ существует, скачиваем его
          if [ ! -f ~/empolimer/nginx/nginx.conf ]; then
            echo "Файл nginx.conf не найден. Скачиваем..."
            mkdir -p ~/empolimer/nginx
            curl -v -o ~/empolimer/nginx/nginx.conf https://raw.githubusercontent.com/aleksioprime/sk-empolimer/main/web/front/nginx/nginx.conf
          else
            echo "Файл nginx.conf уже существует. Не скачиваем."
          fi

          echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login --username ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

          docker compose -f docker-compose.prod.yaml down
          docker compose -f docker-compose.prod.yaml pull
          docker compose -f docker-compose.prod.yaml up -d --remove-orphans
        EOF
